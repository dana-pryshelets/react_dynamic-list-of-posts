{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/posts.js","App.jsx","index.js"],"names":["PostsList","posts","showDetails","setPosts","className","map","post","key","id","userId","title","type","onClick","BASE_URL","getPostComments","postId","fetch","then","response","json","comments","data","filter","comment","NewCommentForm","selectedPostId","setComments","useState","name","setName","email","setEmail","setComment","handleSubmit","event","preventDefault","method","headers","body","JSON","stringify","addComment","result","onSubmit","value","onChange","target","placeholder","PostDetails","selectedPost","setPost","hiddenComments","setHiddenComments","useEffect","postFromServer","commentsFromServer","deleteComment","commentId","removeComment","length","App","user","setUser","setselectedPostId","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4dbec3b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, setPosts, showDetails }) => (\n\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n    <ul className=\"PostsList__list\">\n      {posts ? posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>\n              {`[User #${post.userId}]:`}\n            </b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            onClick={() => showDetails(post.id)}\n          >\n            Open\n          </button>\n        </li>\n      )) : ''}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string,\n      createdAt: PropTypes.string,\n      id: PropTypes.number,\n      title: PropTypes.string,\n      updatedAt: PropTypes.string,\n    }),\n  ).isRequired,\n  setPosts: PropTypes.func.isRequired,\n  showDetails: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getPostComments = postId => fetch(`${BASE_URL}/comments`)\n  .then(response => response.json())\n  .then(comments => comments.data)\n  .then(comments => comments.filter(comment => postId === comment.postId));\n\nexport const removeComment = commentId => fetch(\n  `${BASE_URL}/comments/${commentId}`,\n  { method: 'DELETE' },\n);\n\nexport const addComment = comment => fetch(`${BASE_URL}/comments`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(comment),\n});\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { addComment, getPostComments } from '../../api/comments';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ selectedPostId, setComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newComment = {\n      postId: selectedPostId,\n      name,\n      email,\n      body: comment,\n    };\n\n    addComment(newComment)\n      .then(() => getPostComments(selectedPostId))\n      .then(result => setComments(result));\n    clearForm();\n  };\n\n  return (\n    <form\n      onSubmit={event => handleSubmit(event)}\n      className=\"NewCommentForm\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={((event) => {\n            setName(event.target.value);\n          })}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={((event) => {\n            setEmail(event.target.value);\n          })}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment}\n          onChange={((event) => {\n            setComment(event.target.value);\n          })}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  setComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPost }) => {\n  const [post, setPost] = useState('');\n  const [comments, setComments] = useState([]);\n  const [hiddenComments, setHiddenComments] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPost)\n      .then(response => response.data)\n      .then(postFromServer => setPost(postFromServer));\n    getPostComments(selectedPost)\n      .then(commentsFromServer => setComments(commentsFromServer));\n  }, [selectedPost]);\n\n  const hideComments = () => {\n    setHiddenComments(!hiddenComments);\n  };\n\n  const deleteComment = (commentId) => {\n    removeComment(commentId)\n      .then(() => getPostComments(selectedPost))\n      .then(result => setComments(result));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          onClick={hideComments}\n          className=\"button\"\n        >\n          { `${hiddenComments ? 'Hide' : 'Show'} ${comments.length} comments` }\n        </button>\n\n        {!hiddenComments && (\n          <ul className=\"PostDetails__list\">\n            { comments.map(comment => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  onClick={() => deleteComment(comment.id)}\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPost}\n            setComments={setComments}\n          />\n        </div>\n      </section>\n\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPost: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getAllPosts = () => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json());\n\nexport const getUserPosts = userId => fetch(\n  `${BASE_URL}/posts?userId=${userId}`,\n)\n  .then(response => response.json());\n\nexport const getPostDetails = postId => fetch(`${BASE_URL}/posts/${postId}`)\n  .then(response => response.json());\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getAllPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [user, setUser] = useState(null);\n  const [selectedPostId, setselectedPostId] = useState('');\n\n  const handleChange = (event) => {\n    setUser(event.target.value);\n  };\n\n  useEffect(() => {\n    if (+user !== 0) {\n      getUserPosts(+user)\n        .then(post => setPosts(post.data));\n\n      return;\n    }\n\n    getAllPosts()\n      .then(response => response.data)\n      .then((postsFromServer) => {\n        setPosts(postsFromServer);\n      });\n  }, [user]);\n\n  const showDetails = (postId) => {\n    setselectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            value={user}\n            onChange={handleChange}\n            className=\"App__user-selector\"\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setPosts={setPosts}\n            showDetails={showDetails}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId === '' ? 'Choose a post to see details' : ''}\n          {selectedPostId && <PostDetails selectedPost={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}